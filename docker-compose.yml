services:
  client:
    container_name: praktikum-client
    image: praktikum-client
    build:
      context: .
      dockerfile: Dockerfile.client
      args:
        CLIENT_PORT: ${CLIENT_PORT:-3000}
    restart: always
    env_file:
      - .env
    ports:
      - '${CLIENT_PORT:-3000}:${CLIENT_PORT:-3000}'
    environment:
      - CLIENT_PORT=${CLIENT_PORT:-3000}
      - PORT=${CLIENT_PORT:-3000}
      - SERVER_PORT=${SERVER_PORT:-3001}
      - NODE_ENV=${NODE_ENV:-production}
      - COOKIE_DOMAIN=${COOKIE_DOMAIN}

    depends_on:
      server:
        condition: service_healthy
    networks:
      - echo-runner-network
    healthcheck:
      test: ['CMD', 'sh', '-c', 'PORT=${CLIENT_PORT:-3000} node ./healthcheck.js']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - 'com.echo-runner.service=client'
      - 'com.echo-runner.environment=production'
      - 'com.echo-runner.version=${VERSION:-latest}'

  server:
    container_name: praktikum-server
    image: praktikum-server
    build:
      context: .
      dockerfile: Dockerfile.server
      args:
        SERVER_PORT: ${SERVER_PORT:-3001}
    restart: always
    env_file:
      - .env
    ports:
      - '${SERVER_PORT:-3001}:${SERVER_PORT:-3001}'
    environment:
      SERVER_PORT: ${SERVER_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-echo_runner}
      NODE_ENV: ${NODE_ENV:-production}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-echo_runner}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - echo-runner-network
    healthcheck:
      test: ['CMD', 'sh', '-c', 'PORT=${SERVER_PORT:-3001} node ./healthcheck.js']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - 'com.echo-runner.service=server'
      - 'com.echo-runner.environment=production'
      - 'com.echo-runner.version=${VERSION:-latest}'

  postgres:
    image: postgres:14
    container_name: praktikum-postgres
    restart: always
    env_file:
      - .env
    ports:
      - '${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}'
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-echo_runner}
    volumes:
      - ./tmp/pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-echo_runner}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - echo-runner-network
    labels:
      - 'com.echo-runner.service=database'
      - 'com.echo-runner.environment=production'
      - 'com.echo-runner.version=${VERSION:-latest}'

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: praktikum-pgadmin
    restart: always
    env_file:
      - .env
    ports:
      - '${PGADMIN_PORT:-8080}:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - ./tmp/pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - echo-runner-network
    labels:
      - 'com.echo-runner.service=pgadmin'
      - 'com.echo-runner.environment=production'
      - 'com.echo-runner.version=${VERSION:-latest}'

networks:
  echo-runner-network:
    driver: bridge
