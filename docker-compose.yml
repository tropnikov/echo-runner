services:
  client:
    container_name: prakticum-client
    image: prakticum-client
    build:
      context: .
      dockerfile: Dockerfile.client
      args:
        CLIENT_PORT: ${CLIENT_PORT:-3000}
    restart: always
    ports:
      - '${CLIENT_PORT:-3000}:${CLIENT_PORT:-3000}'
    environment:
      - CLIENT_PORT=${CLIENT_PORT:-3000}
      - PORT=${CLIENT_PORT:-3000}
      - SERVER_PORT=${SERVER_PORT:-3001}
      - NODE_ENV=production
    depends_on:
      server:
        condition: service_healthy
    networks:
      - echo-runner-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'node -e "require(\"http\").get(\"http://localhost:${CLIENT_PORT:-3000}\", (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on(\"error\", () => process.exit(1))"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - 'com.echo-runner.service=client'
      - 'com.echo-runner.version=${VERSION:-latest}'

  server:
    container_name: prakticum-server
    image: prackicum-server
    build:
      context: .
      dockerfile: Dockerfile.server
      args:
        SERVER_PORT: ${SERVER_PORT:-3001}
    restart: always
    ports:
      - '${SERVER_PORT:-3001}:${SERVER_PORT:-3001}'
    environment:
      SERVER_PORT: ${SERVER_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-echo_runner}
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - echo-runner-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'node -e "require(\"http\").get(\"http://localhost:${SERVER_PORT:-3001}\", (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on(\"error\", () => process.exit(1))"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - 'com.echo-runner.service=server'
      - 'com.echo-runner.version=${VERSION:-latest}'

  postgres:
    image: postgres:14
    container_name: prakticum-postgres
    restart: always
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-echo_runner}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-echo_runner}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - echo-runner-network
    labels:
      - 'com.echo-runner.service=database'
      - 'com.echo-runner.version=${VERSION:-latest}'

volumes:
  postgres_data:
    driver: local

networks:
  echo-runner-network:
    driver: bridge
